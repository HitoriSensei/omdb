/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * OMDb API
 * This API requires authorization, you can get a free key here: [http://omdbapi.com/apikey.aspx](http://omdbapi.com/apikey.aspx)
 *
 * OpenAPI spec version: 1.0
 * Contact: bfritz@fadingsignal.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "gen/api/configuration";

const BASE_PATH = "http://omdbapi.com".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}


/**
 * IDParameterApi - fetch parameter creator
 * @export
 */
export const IDParameterApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns a single result based on the ID provided
         * @param {string} i A valid IMDb ID (e.g. tt0000001)
         * @param {'short' | 'full'} [plot] Return short or full plot
         * @param {'json' | 'xml'} [r] The response type to return
         * @param {string} [callback] JSONP callback name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getId(i: string, plot?: 'short' | 'full', r?: 'json' | 'xml', callback?: string, options: any = {}): FetchArgs {
            // verify required parameter 'i' is not null or undefined
            if (i === null || i === undefined) {
                throw new RequiredError('i','Required parameter i was null or undefined when calling getId.');
            }
            const localVarPath = `/?i`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyQueryParam required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("apikey")
					: configuration.apiKey;
                localVarQueryParameter["apikey"] = localVarApiKeyValue;
            }

            if (i !== undefined) {
                localVarQueryParameter['i'] = i;
            }

            if (plot !== undefined) {
                localVarQueryParameter['plot'] = plot;
            }

            if (r !== undefined) {
                localVarQueryParameter['r'] = r;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            // @ts-ignore
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

interface FetchJSON<Data> {
    json(): Promise<Data>
}

/**
 * IDParameterApi - functional programming interface
 * @export
 */
export const IDParameterApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns a single result based on the ID provided
         * @param {string} i A valid IMDb ID (e.g. tt0000001)
         * @param {'short' | 'full'} [plot] Return short or full plot
         * @param {'json' | 'xml'} [r] The response type to return
         * @param {string} [callback] JSONP callback name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getId(i: string, plot?: 'short' | 'full', r?: 'json' | 'xml', callback?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response & FetchJSON<IDParameter.Response>> {
            const localVarFetchArgs = IDParameterApiFetchParamCreator(configuration).getId(i, plot, r, callback, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * IDParameterApi - factory interface
 * @export
 */
export const IDParameterApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Returns a single result based on the ID provided
         * @param {string} i A valid IMDb ID (e.g. tt0000001)
         * @param {'short' | 'full'} [plot] Return short or full plot
         * @param {'json' | 'xml'} [r] The response type to return
         * @param {string} [callback] JSONP callback name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getId(i: string, plot?: 'short' | 'full', r?: 'json' | 'xml', callback?: string, options?: any) {
            return IDParameterApiFp(configuration).getId(i, plot, r, callback, options)(fetch, basePath);
        },
    };
};

export namespace IDParameter {
    export interface Response {
        Title: string;
        Year: string;
        Rated: string;
        Released: string;
        Runtime: string;
        Genre: string;
        Director: string;
        Writer: string;
        Actors: string;
        Plot: string;
        Language: string;
        Country: string;
        Awards: string;
        Poster: string;
        Ratings: Rating[];
        Metascore: string;
        imdbRating: string;
        imdbVotes: string;
        imdbID: string;
        Type: string;
        DVD: string;
        BoxOffice: string;
        Production: string;
        Website: string;
        Response: string;
    }

    interface Rating {
        Source: string;
        Value: string;
    }
}

/**
 * IDParameterApi - object-oriented interface
 * @export
 * @class IDParameterApi
 * @extends {BaseAPI}
 */
export class IDParameterApi extends BaseAPI {
    /**
     * 
     * @summary Returns a single result based on the ID provided
     * @param {string} i A valid IMDb ID (e.g. tt0000001)
     * @param {'short' | 'full'} [plot] Return short or full plot
     * @param {'json' | 'xml'} [r] The response type to return
     * @param {string} [callback] JSONP callback name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IDParameterApi
     */
    public getId(i: string, plot?: 'short' | 'full', r?: 'json' | 'xml', callback?: string, options?: any) {
        return IDParameterApiFp(this.configuration).getId(i, plot, r, callback, options)(this.fetch, this.basePath);
    }

}

/**
 * SearchParameterApi - fetch parameter creator
 * @export
 */
export const SearchParameterApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns an array of results for a given title
         * @param {string} s Title of movie or series
         * @param {number} [y] Year of release
         * @param {'movie' | 'series'} [type] Return movie or series
         * @param {'json' | 'xml'} [r] The response type to return
         * @param {number} [page] Page number to return
         * @param {string} [callback] JSONP callback name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        titleSearch(s: string, y?: number, type?: 'movie' | 'series', r?: 'json' | 'xml', page?: number, callback?: string, options: any = {}): FetchArgs {
            // verify required parameter 's' is not null or undefined
            if (s === null || s === undefined) {
                throw new RequiredError('s','Required parameter s was null or undefined when calling titleSearch.');
            }
            const localVarPath = `/?s`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyQueryParam required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("apikey")
					: configuration.apiKey;
                localVarQueryParameter["apikey"] = localVarApiKeyValue;
            }

            if (s !== undefined) {
                localVarQueryParameter['s'] = s;
            }

            if (y !== undefined) {
                localVarQueryParameter['y'] = y;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (r !== undefined) {
                localVarQueryParameter['r'] = r;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            // @ts-ignore
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export module TitleSearch {

    export interface Search {
        Title: string;
        Year: string;
        imdbID: string;
        Type: string;
        Poster: string;
    }

    export interface Response {
        Search?: Search[];
        totalResults: string;
        Response: string;
    }

}



/**
 * SearchParameterApi - functional programming interface
 * @export
 */
export const SearchParameterApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns an array of results for a given title
         * @param {string} s Title of movie or series
         * @param {number} [y] Year of release
         * @param {'movie' | 'series'} [type] Return movie or series
         * @param {'json' | 'xml'} [r] The response type to return
         * @param {number} [page] Page number to return
         * @param {string} [callback] JSONP callback name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        titleSearch(s: string, y?: number, type?: 'movie' | 'series', r?: 'json' | 'xml', page?: number, callback?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response & FetchJSON<TitleSearch.Response>> {
            const localVarFetchArgs = SearchParameterApiFetchParamCreator(configuration).titleSearch(s, y, type, r, page, callback, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * SearchParameterApi - factory interface
 * @export
 */
export const SearchParameterApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Returns an array of results for a given title
         * @param {string} s Title of movie or series
         * @param {number} [y] Year of release
         * @param {'movie' | 'series'} [type] Return movie or series
         * @param {'json' | 'xml'} [r] The response type to return
         * @param {number} [page] Page number to return
         * @param {string} [callback] JSONP callback name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        titleSearch(s: string, y?: number, type?: 'movie' | 'series', r?: 'json' | 'xml', page?: number, callback?: string, options?: any) {
            return SearchParameterApiFp(configuration).titleSearch(s, y, type, r, page, callback, options)(fetch, basePath);
        },
    };
};

/**
 * SearchParameterApi - object-oriented interface
 * @export
 * @class SearchParameterApi
 * @extends {BaseAPI}
 */
export class SearchParameterApi extends BaseAPI {
    /**
     * 
     * @summary Returns an array of results for a given title
     * @param {string} s Title of movie or series
     * @param {number} [y] Year of release
     * @param {'movie' | 'series'} [type] Return movie or series
     * @param {'json' | 'xml'} [r] The response type to return
     * @param {number} [page] Page number to return
     * @param {string} [callback] JSONP callback name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchParameterApi
     */
    public titleSearch(s: string, y?: number, type?: 'movie' | 'series', r?: 'json' | 'xml', page?: number, callback?: string, options?: any) {
        return SearchParameterApiFp(this.configuration).titleSearch(s, y, type, r, page, callback, options)(this.fetch, this.basePath);
    }

}

/**
 * TitleParameterApi - fetch parameter creator
 * @export
 */
export const TitleParameterApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns the most popular match for a given title
         * @param {string} t Title of movie or series
         * @param {number} [y] Year of release
         * @param {'movie' | 'series'} [type] Return movie or series
         * @param {'short' | 'full'} [plot] Return short or full plot
         * @param {'json' | 'xml'} [r] The response type to return
         * @param {string} [callback] JSONP callback name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTitle(t: string, y?: number, type?: 'movie' | 'series', plot?: 'short' | 'full', r?: 'json' | 'xml', callback?: string, options: any = {}): FetchArgs {
            // verify required parameter 't' is not null or undefined
            if (t === null || t === undefined) {
                throw new RequiredError('t','Required parameter t was null or undefined when calling getTitle.');
            }
            const localVarPath = `/?t`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyQueryParam required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("apikey")
					: configuration.apiKey;
                localVarQueryParameter["apikey"] = localVarApiKeyValue;
            }

            if (t !== undefined) {
                localVarQueryParameter['t'] = t;
            }

            if (y !== undefined) {
                localVarQueryParameter['y'] = y;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (plot !== undefined) {
                localVarQueryParameter['plot'] = plot;
            }

            if (r !== undefined) {
                localVarQueryParameter['r'] = r;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            // @ts-ignore
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TitleParameterApi - functional programming interface
 * @export
 */
export const TitleParameterApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns the most popular match for a given title
         * @param {string} t Title of movie or series
         * @param {number} [y] Year of release
         * @param {'movie' | 'series'} [type] Return movie or series
         * @param {'short' | 'full'} [plot] Return short or full plot
         * @param {'json' | 'xml'} [r] The response type to return
         * @param {string} [callback] JSONP callback name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTitle(t: string, y?: number, type?: 'movie' | 'series', plot?: 'short' | 'full', r?: 'json' | 'xml', callback?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = TitleParameterApiFetchParamCreator(configuration).getTitle(t, y, type, plot, r, callback, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * TitleParameterApi - factory interface
 * @export
 */
export const TitleParameterApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Returns the most popular match for a given title
         * @param {string} t Title of movie or series
         * @param {number} [y] Year of release
         * @param {'movie' | 'series'} [type] Return movie or series
         * @param {'short' | 'full'} [plot] Return short or full plot
         * @param {'json' | 'xml'} [r] The response type to return
         * @param {string} [callback] JSONP callback name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTitle(t: string, y?: number, type?: 'movie' | 'series', plot?: 'short' | 'full', r?: 'json' | 'xml', callback?: string, options?: any) {
            return TitleParameterApiFp(configuration).getTitle(t, y, type, plot, r, callback, options)(fetch, basePath);
        },
    };
};

/**
 * TitleParameterApi - object-oriented interface
 * @export
 * @class TitleParameterApi
 * @extends {BaseAPI}
 */
export class TitleParameterApi extends BaseAPI {
    /**
     * 
     * @summary Returns the most popular match for a given title
     * @param {string} t Title of movie or series
     * @param {number} [y] Year of release
     * @param {'movie' | 'series'} [type] Return movie or series
     * @param {'short' | 'full'} [plot] Return short or full plot
     * @param {'json' | 'xml'} [r] The response type to return
     * @param {string} [callback] JSONP callback name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TitleParameterApi
     */
    public getTitle(t: string, y?: number, type?: 'movie' | 'series', plot?: 'short' | 'full', r?: 'json' | 'xml', callback?: string, options?: any) {
        return TitleParameterApiFp(this.configuration).getTitle(t, y, type, plot, r, callback, options)(this.fetch, this.basePath);
    }

}

